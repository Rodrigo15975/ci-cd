name: CI/CD to AWS ECR (Production Only)

on:
  push:
    branches: ['master']

permissions:
  contents: write # ‚Üê Esto es necesario para poder hacer git push(obtener versionado opcinal)

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      # Step 1: Checkout code
      - name: üßæ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üè∑Ô∏è Obtener y generar nueva versi√≥n
        id: semver
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "√öltimo tag encontrado: $LAST_TAG"

          # Extrae versi√≥n sem√°ntica
          VERSION=$(echo "$LAST_TAG" | sed 's/v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Aumentamos el PATCH autom√°ticamente
          PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"

          echo "Nueva versi√≥n: $NEW_VERSION"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Set short git commit SHA
        id: commit
        uses: prompt/actions-commit-hash@v2

      # Step 2: Set up Node.js
      - name: ‚öôÔ∏è Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Install dependencies
      - name: üì¶ Install dependencies
        run: |
          echo "üì• Instalando dependencias..."
          npm install

      # Step 4: Build NestJS application
      - name: üîß Build application
        run: |
          echo "üî® Construyendo aplicaci√≥n NestJS..."
          npm run build

      # Step 5: Configure AWS credentials
      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}

      # Step 6: Log in to Amazon ECR
      - name: üîë Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 7: Build, tag, and push Docker image to ECR
      - name: üöÄ Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # ‚Üê URL de tu repositorio ECR, por ejemplo: 222634373780.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # ‚Üê Nombre del repositorio en ECR, por ejemplo: api-gateway
          SHORT_COMMIT: ${{ steps.commit.outputs.short }} imagen
          VERSION: ${{ steps.semver.outputs.version }}
        run: |
          echo "üöß Construyendo imagen Docker con versi√≥n: $VERSION"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .

          echo "üì§ Subiendo imagen: $VERSION"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION

          echo "‚úÖ Imagen construida y subida a ECR."

        # 8. Update kubeconfig for EKS
      # - name: Update kubeconfig
      #   run: |
      #     echo "üöÄ Actualizando kubeconfig..."
      #     aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      # - name: üö¢ Actualizar deployment en Kubernetes con nueva imagen
      #   run: |
      #     echo "üîÑ Actualizando deployment con nueva imagen: $VERSION"
      #     kubectl set image deployment/${{ secrets.K8S_DEPLOYMENT_NAME }} \
      #       ${{ secrets.K8S_CONTAINER_NAME }}=$ECR_REGISTRY/$ECR_REPOSITORY:$VERSION \
      #       --namespace=${{ secrets.K8S_NAMESPACE }}

      #   # 9. Update Deployment in EKS (only image)
      # - name: Update image in EKS Deployment
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     echo "üöÄ Actualizando imagen del deployment..."
      #     kubectl set image deployment/${{ secrets.K8S_DEPLOYMENT_NAME }} \
      #       ${{ secrets.K8S_CONTAINER_NAME }}=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
